#FUNCTIONS
def data():

    cur.execute("CREATE DATABASE IF NOT EXISTS CARBONOMICS")
    cur.execute("USE CARBONOMICS")
    
    cur.execute("CREATE TABLE IF NOT EXISTS STUDY(SRNO INT PRIMARY KEY AUTO_INCREMENT,TYPE VARCHAR(30) NOT NULL,GRP VARCHAR(30),FORMULA VARCHAR(125) UNIQUE NOT NULL,NAME VARCHAR(125) UNIQUE NOT NULL)")
    
    alkanes=[('CH₃-CH(CH₃)-CH₂-CH₃','2-Methylbutane'),('CH₃-C(CH₂)(CH₂)-CH₃','2,2-Dimethylpropane'),('CH₃-CH(CH₂)-CH(CH₂)-CH₃','2,3-Dimethylbutane'),('CH₃-CH(CH₃)-CH₂-CH(CH₃)-CH₃','2,4-Dimethylpentane'),('CH₃-CH₂-CH₂-CH(CH₂-CH₃)-CH₂-CH₃','3-Ethylhexane')]
    
    alkenes=[('CH₂=C(CH₃)-CH₂-CH₃','2-Methylbutene'),('CH₃-CH=CH-CH₂-CH₃','Pent-2-ene'),('CH₃-CH=CH-C(CH₃)(CH₃)-CH₂','4,4-Dimethylpent-2-ene'),('CH₃-CH₂-CH=CH-CH(CH₃)-CH₃','5-Methylhex-3-ene'),('CH₂=C(CH₃)-CH₂-CH(CH₂-CH₃)-CH₂-CH₂-CH₃','4-Ethyl-2-methylheptene')]
    
    alkynes=[('CH☰C-CH(CH₃)-CH₃','3-Methylbutyne'),('CH₃-C☰C-CH(CH₃)-CH₃','4-Methylpent-2-yne'),('CH₃-C☰C-C(CH₃)(CH₃)-CH₂-CH₂-CH₃','4,4-Dimethylhept-2-yne'),('CH₃-CH(CH₃)-C☰C-CH(CH₃)-CH₃','2,5-Dimethylhex-3-yne'),('CH₃-CH(CH₃)-CH₂-C☰C-CH₂-C(CH₃)(CH₃)-CH₃','2,2,7-Trimethyloct-4-yne')]
    
    alcohols=[('CH₃-CH₂-CH₂-CH₂-OH','Butanol'),('CH₃-CH(OH)-CH₂-CH₃','Butan-2-ol'),('CH₃-CH(OH)-CH₂-CH(CH₃)-CH₃','4-Methylpentan-2-ol'),('CH₃-CH(OH)-CH₂-CH(OH)-CH₃','Pentan-2,4-diol'),('CH₃-CH₂-CH(OH)-CH(CH₂-CH₃)-CH(CH₃)-CH₃','4-Ethyl-5-methylhexan-3-ol')]
    
    aldehydes=[('CH₃-CH₂-CHO','Propanal'),('CH₃-CH(CHO)-CH₂-CH₃','Butan-2-al'),('C₆H₅-CHO','Benzaldehyde'),('CH₃-CH(CHO)-CH₂-CH(CHO)-CH₃','Pentan-2,4-dial'),('CH₃-CH(CH₃)-CH₂-CH₂-CH₂-CHO','5-Methylhexanal')]
    
    ketones=[('CH₂-CO-CH₂-CH₂','Propan-2-one'),('CH₃-CH₂-CO-CH₂-CH₃','Pentan-3-one'),('CH₃-CH(CH₂-CH₃)-CH₂-CO-CH₃','4-Ethylpentan-2-one'),('CH₃-CH(CH₃)-CH₂-CO-CH₂-CH₂-CH₂-CH₃','2-Methyloctan-4-one'),('CH₃-CO-CH(CH₃)-CH₂-CH(CH₂-CH₃)-CH₃','5-Ethyl-3-methylhexan-2-one')]
    
    carboxylicacids=[('HCOOH','Methanoic acid'),('CH₃-CH₂-COOH','Propanoic acid'),('HOOC-CH₂-COOH','Propanedioic acid'),('HOOC-CH₂-CH(COOH)-CH₂-COOH ','Propane-1,2,3-tricarboxylic acid'),('CH₃-CH(COOH)-CH₂-CH₂-CH₂-CH₃','2-Methylhexanoic acid')]
    
    ethers=[('CH₃-O-CH₃','Methoxymethane'),('CH₃-O-CH₂-CH₃','Methoxyethane'),('C₆H₅-O-CH₃','Methoxybenzene'),('CH₃-O-CH(CH₃)-CH₃','2-Methoxypropane'),('CH₃-O-CH₂-CH₂-O-CH₃)','1,2-Dimethoxyethane')]
    
    amines=[('CH₃-CH₂-NH₂','Ethanamine'),('CH₃-CH(NH₂)-CH₃','Propan-2-amine'),('CH₃-NH-CH₂-CH₃','N-Methylethanamine'),('CH₃-N(CH₃)-CH₃','N,N-Dimethylmethanamine'),('CH₃-N(CH₃)-CH₂-CH₂-CH₂-CH₃','N,N-Dimethylbutanamine')]
    
    alkylhalides=[('CH₃-CH₂-CH₂-CH₂-Br','Bromobutane'),('CH₃-CH(Cl)-CH₃','2-Chloropropane'),('CH₂(Cl)-CH(CH₃)-CH₂-CH₂-CH₃','1-Chloro-2-methylpentane'),('CH₃-CH(Cl)-CH₂-CH(Br)-CH₃','2-Bromo-4-chloropentane'),('CH₃-CH₂-CH(I)-CH(CH₂-CH₃)-CH₂-CH₃','3-Iodo-4-ethylhexane')]
    
    poly=[('CH₂=CH-CH₂-NH₂','Prop-2-enamine'),('CH₃-CH(O-CH₃)-CHO','2-Methoxypropanal'),('CH₃-C(CH₃)=CH-CO-CH₃','4-Methylpent-3-en-2-one'),('CH₃-CH₂-CH=CH-OH','Butenol'),('CH₃-CH₂-CH(COOH)-CH₂-OH','2-Ethyl-3-hydroxyproanoic acid')]
    
    cc=[('[Ni(CO)₄]','Tetracarbonylnickel'),('K₃[Al(C₂O₄)₃]','Potassium trioxalatoaluminate(III)'),('Hg[Co(SCN)₄]','Mercury(I) tetrathiocyanato-S-cobaltate(III)'),('[Co(Cl)₂(en)₂]⁺','Dichloridobis(ethane-1,2-diamine)cobalt(III)'),('K₂[Zn(OH)₄]','Potassium tetrahydroxidozincate(II)'),('[Co(NH₃)₆]Cl₃','Hexaamminecobalt(III) chloride'),('Fe₄[Fe(CN)₆]₃','Iron(III) hexacyanidoferrate(II)'),('[Co(NH₃)₅(Cl)]Cl₂','Pentaamminechloridocobalt(III) chloride'),('K₂[Ni(CN)₄]','Potassium tetracyanidonickelate(II)'),('[Co(NH₃)₄(H₂O)₂]Cl₃','Tetraamminediaquacobalt(III) chloride')]

    
    cur.executemany("INSERT IGNORE INTO STUDY(TYPE,GRP,FORMULA,NAME) VALUES('ORGANIC','ALKANES',%s,%s)",alkanes)

    cur.executemany("INSERT IGNORE INTO STUDY(TYPE,GRP,FORMULA,NAME) VALUES('ORGANIC','ALKENES',%s,%s)",alkenes)

    cur.executemany("INSERT IGNORE INTO STUDY(TYPE,GRP,FORMULA,NAME) VALUES('ORGANIC','ALKYNES',%s,%s)",alkynes)
    
    cur.executemany("INSERT IGNORE INTO STUDY(TYPE,GRP,FORMULA,NAME) VALUES('ORGANIC','ALCOHOLS',%s,%s)",alcohols)

    cur.executemany("INSERT IGNORE INTO STUDY(TYPE,GRP,FORMULA,NAME) VALUES('ORGANIC','ALDEHYDES',%s,%s)",aldehydes)

    cur.executemany("INSERT IGNORE INTO STUDY(TYPE,GRP,FORMULA,NAME) VALUES('ORGANIC','KETONES',%s,%s)",ketones)

    cur.executemany("INSERT IGNORE INTO STUDY(TYPE,GRP,FORMULA,NAME) VALUES('ORGANIC','CARBOXYLIC ACIDS',%s,%s)",carboxylicacids)

    cur.executemany("INSERT IGNORE INTO STUDY(TYPE,GRP,FORMULA,NAME) VALUES('ORGANIC','ETHERS',%s,%s)",ethers)

    cur.executemany("INSERT IGNORE INTO STUDY(TYPE,GRP,FORMULA,NAME) VALUES('ORGANIC','AMINES',%s,%s)",amines)

    cur.executemany("INSERT IGNORE INTO STUDY(TYPE,GRP,FORMULA,NAME) VALUES('ORGANIC','ALKYL HALIDES',%s,%s)",alkylhalides)

    cur.executemany("INSERT IGNORE INTO STUDY(TYPE,GRP,FORMULA,NAME) VALUES('ORGANIC','POLYFUNCTIONAL',%s,%s)",poly)

    cur.executemany("INSERT IGNORE INTO STUDY(TYPE,FORMULA,NAME) VALUES('COORDINATION',%s,%s)",cc)

    mycon.commit()
    
    home_page()
def home_page():

    print("\251\n\t\t\t\t\t\t\t\t\t\t\t\t\t 🧪 \251ARB0Nomics 🧪\t\t\t\t\t\t\t\t\t\t\t\t\t™\n\n\t\t\t\t\t\t\t\t\t\t\t\t   ~ A COMIC OF IUPAC ~\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tInternational\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tUnion of\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tPure and\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tApplied\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tChemistry\n\n\n\n\nThis is an e-learning platform that provides you with a medium to learn chemistry IUPAC nomenclature of organic and coordination compounds. You can study the rules of IUPAC with examples and also you can give a test providing you a score.\n\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t🟥 NO CLICKING ONLY TYPING 🟥\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t⏺️ be careful of entering whitespaces when typing here '☛  '⏺️")

    print('='*125)

    main_menu()
def main_menu():

    while True:

        choice=input("\251\nEnter 1 for ADMIN 👨🏻‍💼 and 2 for USER 👤\n\n\t1) Admin 👨🏻‍💼\n\n\t2) User 👤\n\n ☛  ")
        print('='*125)

        if choice=='1':

            while True:
                if a_page()==False:
                    if a_last_page()==False:
                        break
                    else:
                        u_menu(user)
                        print("\n\t🫡 WELL DONE ~\n\n\t\t\t\t\t\t\t\t\t\t\t💪🏻hwaiting!💪🏻")
                        break
                else:
                    continue
                    
  
        elif choice=='2':

            if login_page()==False:
                if landing_page():
                    break


        else:
            print("WRONG CHOICE!!")
            print('.'*125)
            continue

        break
def a_page():

    global user

    cur.execute("CREATE TABLE IF NOT EXISTS ADMINPAGE(NAME VARCHAR(20) PRIMARY KEY,USERNAME VARCHAR(17) NOT NULL,PASSWORD VARCHAR(17))")
    cur.execute("INSERT IGNORE INTO ADMINPAGE VALUES('Prasharadha','Admin','ps'),('Smriti Kinra','CARAT','0526')")

    
    print('\251\n\t\t\t\t\t\t\t\t\t\t\t\t  ADMIN 👨🏻‍💼 CREDENTIALS 🔐')
    name=input("\n\tEnter your admin name: ")
    user=input("\n\tEnter your admin username: ")
    password=input("\n\tEnter your admin password: ")

    cur.execute("SELECT * FROM ADMINPAGE WHERE name='{}' AND username='{}' AND password='{}'".format(name,user,password))
    use=cur.fetchone()

    if use:
        print("\n\t\t\t\t\t\t\t\t\t\t\t\t🟢Login successful!!! 🔓")
        print('='*125)
        if a_menu()==False:
            return False

    else:
        print("\t\t\t\t\t\t\t\t\t\t\t   🔴OOPS! Admin Login failed.")
        print('-'*125)
        print("\t\t\t\t\t\t\t\t\t\t\t\t\t  Try again ⟳")
        print('.'*125)
        return True
    return user
    mycon.commit()
def a_menu():

    while True:
        choice = input("\251\n\t\t\t\t\t\t\t\t\t\t\t\t\t  ☰ ADMIN MENU\n\nEnter d/D to Direct into EDITING PAGE 📝"+"{:>80}".format("➤➤")+"\n"+"{:>125}".format("Enter e/E to")+"\n"+"{:>122}".format("EXIT")+"\n"+"{:>120}".format("➤➤")+"\n"+" ☛ ")
        print('='*125)

        if choice=='d' or choice=='D':
            if a_study()==False:
                return False

        elif choice=='e' or choice=='E':
            return False

        else:
            print("WRONG CHOICE!!")
            print('.'*125)
            continue
def a_study():

    while True:

        choice=input("\251"+"{:>122}".format("⬅️⬅️ Enter b/B to go BACK ⬅️⬅️")+"\n"+"\n\t\t\t\t\t\t\t\t\t\t\t\t\t📝 EDITING PAGE\n\t\t\t\t\t\t\t\t\t\t\tof STUDY MATERIAL 📚 EXAMPLES 📃\n\nEnter 1 to EDIT 🖋 ORGANIC NOMENCLATURE 📕 EXAMPLES 📃"+"{:>65}".format("➤➤")+"\n"+"Enter 2 to EDIT 🖋 COORDINATION NOMENCLATURE 📘 EXAMPLES 📃"+"{:>65}".format("Enter e/E to")+"\n"+"{:>122}".format("EXIT")+"\n"+"{:>120}".format("➤➤")+"\n"+" ☛ ")
        print('='*125)


        if choice=='1':
            if O_edits()==False:
                return False

        elif choice=='2':
            if C_edit()==False:
                return False

        elif choice=='b' or choice=='B':
            break

        elif choice=='e' or choice=='E':
            return False

        else:
            print("WRONG CHOICE!!")
            print('.'*125)
            continue
def O_edits():

    while True:

        choice=input("\251"+"{:>122}".format("⬅️⬅️ Enter b/B to go BACK ⬅️⬅️")+"\n"+"\n\t\t\t\t\t\t\t\t\t\t\t\t\t📝 EDITING PAGE\n\t\t\t\t\t\t\t\t\t\t  of ORGANIC NOMENCLATURE 📕 EXAMPLES 📃\n\nEnter the respective Sr No. to EDIT 🖋 the following group's EXAMPLES 📃:\n\t\t1. ALKANES\n\t\t2. ALKENES\n\t\t3. ALKYNES\n\t\t4. ALCOHOLS\n\t\t5. ALDEHYDES\n\t\t6. KETONES\n\t\t7. CARBOXYLIC ACIDS\n\t\t8. ETHERS\n\t\t9. AMINES"+"{:>103}".format("➤➤")+"\n"+"\t\t10. ALKYL HALIDES"+"{:>100}".format("Enter e/E to")+"\n"+"\t\t11. POLYFUNCTIONAL"+"{:>96}".format("EXIT")+"\n"+"{:>120}".format("➤➤")+"\n"+" ☛ ")
        print('='*125)

        if choice=='1':
            if O_edit("ALKANES")==False:
                return False

        elif choice=='2':
            if O_edit("ALKENES")==False:
                return False

        elif choice=='3':
            if O_edit("ALKYNES")==False:
                return False

        elif choice=='4':
            if O_edit("ALCOHOLS")==False:
                return False

        elif choice=='5':
            if O_edit("ALDEHYDES")==False:
                return False

        elif choice=='6':
            if O_edit("KETONES")==False:
                return False

        elif choice=='7':
            if O_edit("CARBOXYLIC ACIDS")==False:
                return False
        elif choice=='8':
            if O_edit("ETHERS")==False:
                return False

        elif choice=='9':
            if O_edit("AMINES")==False:
                return False

        elif choice=='10':
            if O_edit("ALKYL HALIDES")==False:
                return False

        elif choice=='11':
            if O_edit("POLYFUNCTIONAL")==False:
                return False

        elif choice=='b' or choice=='B':
            break

        elif choice=='e' or choice=='E':
            return False

        else:
            print("WRONG CHOICE!!")
            print('.'*125)
            continue
def O_edit(grp):

    O_dis(grp)

    while True:
        print('.'*125)
        choice1=input("{:>120}".format("➤➤")+"\n"+"{:>125}".format("Enter e/E to")+"\n"+"Enter d/D to Direct into EDITING PAGE🖋 of these Examples 📃"+"{:>61}".format("EXIT")+"\n"+"{:>120}".format("➤➤")+"\n"+" ☛ ")
        print('='*125)

        if choice1=='d' or choice1=='D':
            while True:
                choice2=input('\251'+"{:>122}".format("⬅️⬅️ Enter b/B to go BACK ⬅️⬅️")+"\n"+'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t- EDIT -\n\nWant to?\n\n1 ADD 📝'+"{:>112}".format("➤➤")+"\n"+'2 UPDATE 🔄'+"{:>114}".format("Enter e/E to")+"\n"+'3 DELETE 🗑'+"{:>111}".format("EXIT")+"\n"+"{:>120}".format("➤➤")+"\n"+" ☛ ")
                print('='*125)

                if choice2=='1':
                    if O_add(grp)==False:
                        return False
                elif choice2=='2':
                    if O_update(grp)==False:
                        return False
                elif choice2=='3':
                    if O_delete(grp)==False:
                        return False
                elif choice2=='b' or choice2=='B':
                    break
                elif choice2=='e' or choice2=='E':
                    return False
                else:
                    print("WRONG CHOICE!!")
                    print('.'*125)
                    continue

        elif choice1=="B" or choice1=='b':
            break
        elif choice1=='e' or choice1=='E':
            return False
        else:
            print("WRONG CHOICE!!")
            print('.'*125)
            continue
        break
def O_add(grp):

    print("\251"+"{:>122}".format("⬅️⬅️ Enter b/B to go BACK ⬅️⬅️")+"\n"+"\n\t\t\t\t\t\t\t\t\t\t\t\t\t📝 ADDING EXAMPLE\n")

    while True:

        choice=input("{:>120}".format("➤➤")+"\n"+"What to add first?"+"{:>107}".format("Enter e/E to")+"\n"+"1. name or 2. formula"+"{:>101}".format("EXIT")+"\n"+"{:>120}".format("➤➤")+"\n\n"+" ☛ ")
        print('.'*125)

        if choice=='1':
            name=input("\tEnter name to be added: ")
            formula=input("\tEnter it's formula: ")
    
            cur.execute("INSERT IGNORE INTO STUDY(TYPE,GRP,FORMULA,NAME) VALUES('ORGANIC','{}','{}','{}')".format(grp,formula,name))
            print('-'*125)        
            O_dis(grp)
            print("EXAMPLE ADDED 📝")
            print('='*125)

        elif choice=='2':
            formula=input('\tEnter formula to be added: ')
            name=input("\tEnter it's name: ")

            cur.execute("INSERT IGNORE INTO STUDY(TYPE,GRP,FORMULA,NAME) VALUES('ORGANIC','{}','{}','{}')".format(grp,formula,name))
            print('-'*125)        
            O_dis(grp)
            print("EXAMPLE ADDED 📝")
            print('='*125)
        elif choice=='b' or choice=='B':
            break
        elif choice=='e' or choice=='E':
            return False
        else:
            print("WRONG CHOICE!!")
            print('.'*125)
            continue
        break
        print('='*125)
    
    mycon.commit()
def O_update(grp):

    print("\251"+"{:>122}".format("⬅️⬅️ Enter b/B to go BACK ⬅️⬅️")+"\n"+"\n\t\t\t\t\t\t\t\t\t\t\t\t\t🔄 UPDATING EXAMPLE\n")
    
    while True:

        choice=input("{:>120}".format("➤➤")+"\n"+"What to update?"+"{:>110}".format("Enter e/E to")+"\n"+"1. name or 2. formula"+"{:>101}".format("EXIT")+"\n"+"{:>120}".format("➤➤")+"\n\n"+" ☛ ")
        print('.'*125)

        if choice=='1':

            formula=input("\tEnter formula whose name is to be updated: ")
            name=input("\tEnter it's updated name: ")
            print('-'*125)

            cur.execute("SELECT * FROM STUDY WHERE FORMULA='{}'".format(formula))
            ex=cur.fetchone()

            if ex:
                cur.execute("UPDATE IGNORE STUDY SET NAME='{}' WHERE FORMULA='{}'".format(name,formula))
                O_dis(grp)
                print("EXAMPLE UPDATED 🔄")
                print('='*125)
            else:
                print("EXAMPLE NOT FOUND ❎")
                print('='*125)











        elif choice=='2':

            name=input("\tEnter name whose formula is to be updated: ")
            formula=input("\tEnter it's updated formula: ")
            print('-'*125)

            cur.execute("SELECT * FROM STUDY WHERE NAME='{}'".format(name))
            ex=cur.fetchone()

            if ex:
                cur.execute("UPDATE IGNORE STUDY SET FORMULA='{}' WHERE NAME='{}'".format(formula,name))
                O_dis(grp)
                print("EXAMPLE UPDATED 🔄")
                print('='*125)
            else:
                print("EXAMPLE NOT FOUND ❎")
                print('='*125)
        elif choice=='b' or choice=='B':
            break
        elif choice=='e' or choice=='E':
            return False
        






        else:
            print("WRONG CHOICE!!")
            print('.'*125)
            continue
        break

    mycon.commit()
def O_delete(grp):

    print("\251"+"{:>122}".format("⬅️⬅️ Enter b/B to go BACK ⬅️⬅️")+"\n"+"\n\t\t\t\t\t\t\t\t\t\t\t\t\t🗑 DELETING EXAMPLE\n")

    while True:

        choice=input("{:>120}".format("➤➤")+"\n"+"How to delete?   through:"+"{:>99}".format("Enter e/E to")+"\n"+"1. name or 2. formula"+"{:>101}".format("EXIT")+"\n"+"{:>120}".format("➤➤")+"\n\n"+" ☛ ")
        print('.'*125)

        if choice=='1':

            name=input("\tEnter name of the example to be deleted: ")
            print('-'*125)

            cur.execute("SELECT * FROM STUDY WHERE NAME='{}'".format(name))
            ex=cur.fetchone()

            if ex:
                cur.execute("DELETE FROM STUDY WHERE NAME='{}'".format(name))
                O_dis(grp)
                print("EXAMPLE DELETED 🗑")
                print('='*125)
            else:
                print("EXAMPLE NOT FOUND ❎")
                print('='*125)
                











        elif choice=='2':

            formula=input("\tEnter formula of the example to be deleted: ")
            print('-'*125)

            cur.execute("SELECT * FROM STUDY WHERE FORMULA='{}'".format(formula))
            ex=cur.fetchone()

            if ex:
                cur.execute("DELETE FROM STUDY WHERE FORMULA='{}'".format(formula))
                O_dis(grp)
                print("EXAMPLE DELETED 🗑")
                print('='*125)
            else:
                print("EXAMPLE NOT FOUND ❎")
                print('='*125)
        elif choice=='b' or choice=='B':
            break
        elif choice=='e' or choice=='E':
            return False






        else:
            print("WRONG CHOICE!!")
            print('.'*125)
            continue
        break

    mycon.commit()
def C_edit():
    C_dis()
    while True:
        print("."*125)
        choice1=input("{:>120}".format("➤➤")+"\n"+"{:>125}".format("Enter e/E to")+"\n"+"Enter d/D to Direct into EDITING PAGE🖋 of these Examples 📃"+"{:>61}".format("EXIT")+"\n"+"{:>120}".format("➤➤")+"\n"+" ☛ ")
        print('='*125)

        if choice1=='d' or choice1=='D':
            while True:
                choice2=input('\251'+"{:>122}".format("⬅️⬅️ Enter b/B to go BACK ⬅️⬅️")+"\n"+'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t- EDIT -\n\nWant to?\n\n1 ADD 📝'+"{:>112}".format("➤➤")+"\n"+'2 UPDATE 🔄'+"{:>114}".format("Enter e/E to")+"\n"+'3 DELETE 🗑'+"{:>111}".format("EXIT")+"\n"+"{:>120}".format("➤➤")+"\n"+" ☛ ")
                print('='*125)
                if choice2=='1':
                    if C_add()==False:
                        return False
                elif choice2=='2':
                    if C_update()==False:
                        return False
                elif choice2=='3':
                    if C_delete()==False:
                        return False
                elif choice2=='b' or choice2=='B':
                    break
                elif choice2=='e' or choice2=='E':
                    return False
                else:
                    print("WRONG CHOICE!!")
                    print('.'*125)
                    continue
            break
        
        elif choice1=="b" or choice1=='B':
            break
        
        elif choice1=='e' or choice1=='E':
            return False 
        
        else:
            print("WRONG CHOICE!!")
            print('.'*125)
            continue    
def C_add():

    print("\251"+"{:>122}".format("⬅️⬅️ Enter b/B to go BACK ⬅️⬅️")+"\n"+"\n\t\t\t\t\t\t\t\t\t\t\t\t\t📝 ADDING EXAMPLE\n")
    while True:
        choice=input("{:>120}".format("➤➤")+"\n"+"What to add first?"+"{:>107}".format("Enter e/E to")+"\n"+"1. name or 2. formula"+"{:>101}".format("EXIT")+"\n"+"{:>120}".format("➤➤")+"\n\n"+" ☛ ")
        print('.'*125)

        if choice=='1':
            name=input("\tEnter it's name: ")
            formula=input('\tEnter formula to be added: ')
    
            cur.execute("INSERT IGNORE INTO STUDY(TYPE,FORMULA,NAME) VALUES('COORDINATION','{}','{}')".format(formula,name))
            print('-'*125)        
            C_dis()
            print("EXAMPLE ADDED 📝")
            print('='*125)

        elif choice=='2':
            formula=input('\tEnter formula to be added: ')
            name=input("\tEnter it's name: ")
            cur.execute("INSERT IGNORE INTO STUDY(TYPE,FORMULA,NAME) VALUES('COORDINATION','{}','{}')".format(formula,name))
            print('-'*125)        
            C_dis()
            print("EXAMPLE ADDED 📝")
            print('='*125)

        elif choice=='b' or choice=='B':
            break
        
        elif choice=='e' or choice=='E':
            return False

        else:
            print("WRONG CHOICE!!")
            print('.'*125)
            continue

        break

        print('='*125)

        mycon.commit()
def C_update():

    print("\251\n\t\t\t\t\t\t\t\t\t\t\t\t\t🔄 UPDATING EXAMPLE\n")

    while True:
        choice=input("{:>120}".format("➤➤")+"\n"+"What to update?"+"{:>110}".format("Enter e/E to")+"\n"+"1. name or 2. formula"+"{:>101}".format("EXIT")+"\n"+"{:>120}".format("➤➤")+"\n\n"+" ☛ ")
        print('.'*125)

        if choice=='1':
            formula=input("\tEnter formula whose name is to be updated: ")
            name=input("\tEnter it's updated name: ")
            print('-'*125)

            cur.execute("SELECT * FROM STUDY WHERE FORMULA='{}'".format(formula))
            ex=cur.fetchone()

            if ex:
                cur.execute("UPDATE IGNORE STUDY SET NAME='{}' WHERE FORMULA='{}'".format(name,formula))
                C_dis()
                print("EXAMPLE UPDATED 🔄")
                print('='*125)
            else:
                print("EXAMPLE NOT FOUND ❎")
                print('='*125)














        elif choice=='2':
            name=input("\tEnter name whose formula is to be updated: ")
            formula=input("\tEnter it's updated formula: ")
            print('-'*125)

            cur.execute("SELECT * FROM STUDY WHERE NAME='{}'".format(name))
            ex=cur.fetchone()

            if ex:
                cur.execute("UPDATE IGNORE STUDY SET FORMULA='{}' WHERE NAME='{}'".format(formula,name))
                C_dis()
                print("EXAMPLE UPDATED 🔄")
                print('='*125)
            else:
                print("EXAMPLE NOT FOUND ❎")
                print('='*125)
        elif choice=='b' or choice=='B':
            break
        elif choice=='e' or choice=='E':
            return False

        else:
            print("WRONG CHOICE!!")
            print('.'*125)
            continue
        break

    mycon.commit()
def C_delete():

    print("\251\n\t\t\t\t\t\t\t\t\t\t\t\t\t🗑 DELETING EXAMPLE")

    while True:

        choice=input("{:>120}".format("➤➤")+"\n"+"How to delete?   through:"+"{:>99}".format("Enter e/E to")+"\n"+"1. name or 2. formula"+"{:>101}".format("EXIT")+"\n"+"{:>120}".format("➤➤")+"\n\n"+" ☛ ")
        print('.'*125)

        if choice=='1':
            name=input("\tEnter name of the example to be deleted: ")
            print('-'*125)

            cur.execute("SELECT * FROM STUDY WHERE NAME='{}'".format(name))
            ex=cur.fetchone()

            if ex:
                cur.execute("DELETE FROM STUDY WHERE NAME='{}'".format(name))
                C_dis()
                print("EXAMPLE DELETED 🗑")
                print('='*125)
            else:
                print("EXAMPLE NOT FOUND ❎")
                print('='*125)














        elif choice=='2':
            formula=input("\tEnter formula of the example to be deleted: ")
            print('-'*125)

            cur.execute("SELECT * FROM STUDY WHERE FORMULA='{}'".format(formula))
            ex=cur.fetchone()

            if ex:
                cur.execute("DELETE FROM STUDY WHERE FORMULA='{}'".format(formula))
                C_dis()
                print("EXAMPLE DELETED 🗑")
                print('='*125)
            else:
                print("EXAMPLE NOT FOUND ❎")
                print('='*125)
        elif choice=='b' or choice=='B':
            break
        elif choice=='e' or choice=='E':
            return False
        else:
            print("WRONG CHOICE!!")
            print('.'*125)
            continue
        break

        mycon.commit()
def a_last_page():

    print("\n++ +++ ++ +++ ++ +++ ++ +++ ++ +++ ++ +++ ++ +++ ++ EXIT FROM ADMIN POV 👨🏻‍💼 ++ +++ ++ +++ ++ +++ ++ +++ ++ +++ ++ +++ ++ +++ ++\n\n")

    while True:

        choice=input("\t\t\t\t\t\t\t\t\t\t\t\t👤 Enter u/U for USER POV 🫵🏻"+"{:>43}".format("➤➤")+"\n"+"{:>125}".format("Enter e/E to")+"\n"+"{:>122}".format("EXIT")+"\n"+"{:>120}".format("➤➤")+"\n"+" ☛ ")
        print('='*125)

        if choice=='u' or choice=='U':
            return True

        elif choice=='e' or choice=='E':
            print("\n\t🫡 WELL DONE ~\n\n\t\t\t\t\t\t\t\t\t\t\t💪🏻hwaiting!💪🏻")
            return False

        else:
            print("WRONG CHOICE!!")
            print('.'*125)
            continue

        print('='*125)
        break
def login_page():

    cur.execute("CREATE TABLE IF NOT EXISTS LOGINPAGE(NAME VARCHAR(20),USERNAME VARCHAR(17) PRIMARY KEY NOT NULL,PASSWORD VARCHAR(17))")
    cur.execute("INSERT IGNORE INTO LOGINPAGE VALUE('Smriti Kinra','CARAT','0526')")
    while True:
        choice=input("\251\n\t\t\t\t\t\t\t\t\t\t\t\t\t  🔗 LOGIN PAGE\n\n\nFirst time?\n\tEnter s/S to SIGN UP\n\n\nAlready a user 👤?\n\tEnter l/L for LOGIN \n\n ☛ ")
        print('='*125)

        if choice=='s' or choice=='S':
            while True:
                user=signup()
                if user:
                    if u_menu(user)==False:
                        return False
                    break
                else:
                    continue
            break

        elif choice=='l' or choice=='L':
            while True:
                user=login()
                if user:
                    if u_menu(user)==False:
                        return False
                    break
                else:
                    continue
            break

        else:
            print("WRONG CHOICE!!")
            print('.'*125)
            continue
        break

    mycon.commit()
    return False
def signup():

    print('\251\n\t\t\t\t\t\t\t\t\t\t\t\t\t || SIGNING UP ||\n\n\nCreate an account ->\n\t\t\t\t\t\t\t\t\t\t\t\t  USER 👤 CREDENTIALS 🔐')
    user={}
    name=input("\n\tEnter your name: ")
    user["Name"]=name
    username=input("\n\tCreate a unique username: ")
    user["Username"]=username
    password=input("\n\tEnter a password: ")
    user["Password"]=password
    cur.execute("SELECT * FROM LOGINPAGE WHERE username='{}'".format(username))
    use=cur.fetchone()

    if use:
        print("\n\t\t\t\t\t\t\t\t\t\t\t  🔴This username already exists!")
        while True:
            print('.'*125)
            choice=input("{:>122}".format("⬅️⬅️ Enter b/B to go BACK ⬅️⬅️")+"\n\n"+"\tEnter s/S to SIGN UP again ⟳\n\n ☛ ")
            print('-'*125)
            if choice=='s' or choice=='S':
                break
            elif choice=='b' or choice=='B':
                login_page()
            else:
                print("WRONG CHOICE!!")
                continue
    else:
        cur.execute('INSERT INTO LOGINPAGE(name,username,password)VALUES("{}","{}","{}")'.format(name,username,password))
        print("\n\t\t\t\t\t\t\t\t\t\t\t\t  🟢Signup successful!!! 🔑\nYou are now our USER!🤝\n\nRemember your credentials 🔐 for future use:)")
        print('.'*125)
        print("\n\nYOUR CREDENTIALS 🔐 :\n")
        for i in user.items():
            a,b=i
            print(a,": ",b)
        print('='*125)
        return username
    mycon.commit()
def login():

    print('\251\n\t\t\t\t\t\t\t\t\t\t\t\t\t || LOGING IN ||\n\n\nLogin your account 🔒\n\n\t\t\t\t\t\t\t\t\t\t\t\t  USER 👤 CREDENTIALS 🔐')

    name=input("\n\tEnter your name: ")
    username=input("\n\tEnter your username: ")
    password=input("\n\tEnter your password: ")

    cur.execute('SELECT * FROM LOGINPAGE WHERE name="{}" AND username="{}" AND password="{}"'.format(name,username,password))
    use=cur.fetchone()

    if use:
        print("\n\t\t\t\t\t\t\t\t\t\t\t\t🟢Login successful!!! 🔓")
        print('='*125)
        return username

    else:
        print("\n\t\t\t\t\t\t\t\t\t\t\t\t  🔴OOPS! Login failed.\nPlease check your username and password carefully.")

        while True:
            print('.'*125)
            choice=input("\tEnter s/S to SIGN UP as a NEW USER 👤\n\t\t\tOR\n\tEnter l/L to try LOGIN again ⟳\n\n ☛")
            print('-'*125)

            if choice=='l' or choice=='L':
                break
            elif choice=='S' or choice=='s':
                if signup():
                    return True
                else:
                    continue
            else:
                print("WRONG CHOICE!!")
                continue

    mycon.commit()
def u_menu(user):

    while True:

        choice=input("\251\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ☰ MENU\n\n\n\tEnter s/S to STUDY 📚\n\n\tEnter t/T to TEST YOURSELF 📋 (ORGANIC AND COORDINATION NOMENCLATURE BOTH)"+"{:>41}".format("➤➤")+"\n"+"{:>125}".format("Enter e/E to")+"\n\tEnter r/R to give REVIEWS 📩"+"{:>89}".format("EXIT")+"\n"+"{:>119}".format("➤➤")+"\n"+" ☛ ")
        print('='*125)

        if choice=='s' or choice=='S':
            if study(user)==False:
                break

        elif choice=='t' or choice=='T':
            if full_test(user)==False:
                break

        elif choice=='e' or choice=='E':
            break

        elif choice=='r' or choice=='R':
            if reviews(user)==False:
                break

        else:
            print("WRONG CHOICE!!")
            print('.'*125)
            continue
def study(user):

    while True:

        choice1=input("\251"+"{:>122}".format("⬅️⬅️ Enter b/B to go BACK ⬅️⬅️")+"\n"+"\n\t\t\t\t\t\t\t\t\t\t\t\t\t 📚 STUDY MATERIAL\n\n\nEnter the respective Sr No. to study the following materials:\n\n\n\t1] ROOT WORDS 📗\n\n\t2] ORGANIC NOMENCLATURE 📕"+"{:>89}".format("➤➤")+"\n"+"{:>125}".format("Enter e/E to")+"\n"+"\t3] COORDINATION NOMENCLATURE 📘"+"{:>86}".format("EXIT")+"\n"+"{:>119}".format("➤➤")+"\n"+" ☛ ")
        print('='*125)
        
        if choice1=='b' or choice1=='B':
            break
        
        elif choice1=='e' or choice1=='E':
            return False

        elif choice1=='1':
            if R_display(user)==False:
                return False





















        elif choice1=='2':

            while True:

                choice2=input("\251"+"{:>122}".format("⬅️⬅️ Enter b/B to go BACK ⬅️⬅️")+"\n"+"\n\t\t\t\t\t\t\t\t\t\t\t\t  📕 ORGANIC NOMENCLATURE\n\n\nOrganic nomenclature is the system of naming organic compounds(which contain mainly carbon and hydrochoice1n), based on specific rules.\n\n\n\tEnter r/R to study IUPAC RULES 📜\n\n\tEnter x/X to study EXAMPLES 📃"+"{:>85}".format("➤➤")+"\n"+"{:>125}".format("Enter e/E to")+"\n"+"\tEnter t/T to give it's TEST 📋"+"{:>87}".format("EXIT")+"\n"+"{:>119}".format("➤➤")+"\n"+" ☛ ")
                print('='*125)

                if choice2=='r' or choice2=='R':
                    if O_rules(user)==False:
                        return False

                elif choice2=='x' or choice2=='X':
                    if O_examples(user)==False:
                        return False

                elif choice2=='t' or choice2=='T':
                    if OC_test("ORGANIC",user)==False:
                        return False

                elif choice2=='e' or choice2=='E':
                    return False

                elif choice2=='b' or choice2=='B':
                    break

                else:
                    print("WRONG CHOICE!!")
                    print('.'*125)
                    continue







        elif choice1=='3':

            while True:

                choice2=input("\251"+"{:>122}".format("⬅️⬅️ Enter b/B to go BACK ⬅️⬅️")+"\n"+"\n\t\t\t\t\t\t\t\t\t\t\t\t 📘 COORDINATION NOMENCLATURE\n\nCoordination nomenclature is the system of naming coordination compounds(which are chemical compounds that consist of an array of anions or neutral molecules bound to a central atom via coordinate covalent bonds AKA COORDINATION COMPLEX), based on specific rules.\n\n\n\tEnter r/R to study IUPAC RULES 📜\n\n\tEnter x/X to study EXAMPLES 📃"+"{:>85}".format("➤➤")+"\n"+"{:>125}".format("Enter e/E to")+"\n"+"\tEnter t/T to give COORDINATION  TEST 📋"+"{:>78}".format("EXIT")+"\n"+"{:>119}".format("➤➤")+"\n"+" ☛ ")
                print('='*125)

                if choice2=='R' or choice2=='r':
                    if C_rules(user)==False:
                        return False

                elif choice2=='x' or choice2=='X':
                    if C_display(user)==False:
                        return False

                elif choice2=='b' or choice2=='B':
                    break

                elif choice2=='t' or choice2=='T':
                    if OC_test("COORDINATION",user)==False:
                        return False

                elif choice2=='e' or choice2=='E':
                    return False

                else:
                    print("WRONG CHOICE!!")
                    print('.'*125)
                    continue
        
        else:
            print("WRONG CHOICE!!")
            print('.'*125)
            continue
def R_display(user):

    cur.execute("CREATE TABLE IF NOT EXISTS ROOT(SRNO INT PRIMARY KEY AUTO_INCREMENT,FORMULA VARCHAR(50) UNIQUE NOT NULL,NAME VARCHAR(50) UNIQUE NOT NULL)")

    basic=[('1 C','Meth'),('2 C','Eth'),('3 C','Prop'),('4 C','But'),('5 C','Pent'),('6 C','Hex'),('7 C','Hept'),('8 C','Oct'),('9 C','Non'),('10 C','Dec')]
    cur.executemany("INSERT IGNORE INTO ROOT(FORMULA,NAME) VALUES(%s,%s)",(basic))

    l=[]
    cur.execute("SELECT * FROM ROOT")
    f=cur.fetchall()

    for i in f:
        a,b,c=i
        l.append([c,b])

    print('\251'+"{:>122}".format("⬅️⬅️ Enter b/B to go BACK ⬅️⬅️")+"\n"+'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t📗 ROOT WORDS\n\nThe root word indicates the number of carbon atoms present in a compound’s parent chain.\n')

    print(tabulate(l,headers=["ROOT WORD","NO. OF CARBONS"],tablefmt="rst"))

    if report(user)==False:
        return False

    mycon.commit()
def O_rules(user):

    print("\251"+"{:>122}".format("⬅️⬅️ Enter b/B to go BACK ⬅️⬅️")+"\n"+"\n\t\t\t\t\t\t\t\t\t\t   📕📜 ORGANIC NOMENCLATURE IUPAC RULES\n\nThe name of an organic compound should reflect its structure and functional groups, which are groups of atoms that have the same physical and chemical characteristics. The name of an organic compound consists of three parts: a word root, a suffix, and a prefix.\n\n>>Lonchoice1st Chain Rule:\n The parent chain of the compound is usually the lonchoice1st chain of carbon atoms. This chain could be straight or of a different shape.\n\n>>Lowest number of Locants:\n We start the numbering of the carbon atoms in the lonchoice1st chain from the end that gives the lowest number to the carbon atoms carrying the substituents.\n\n>>Multiple Presence of the same substituent:\n Prefixes such as di, tri, etc. are added to the substituents that are present twice, thrice respectively in the parent chain.\n\n>>Naming the various substituents:\n If more than one substituent is present, then we need to arranchoice1 the substituents in an alphabetical order of their names.\n\n>>Naming different substituents at equivalent positions:\n In such cases, the substituent first in the alphabetical order choice its the lowest number.\n\n>>Multiple functional group rule:\n When a parent chain contains two or more functional groups, only one functional group is regarded as the principal functional group, and other functional groups are considered prefixes and written in front of word roots in alphabetical order along with their position.\n\n The following priority order of the functional group is used for selecting the principal functional group:\n")

    cur.execute("CREATE TABLE IF NOT EXISTS PREC(SRNO INT PRIMARY KEY AUTO_INCREMENT,GRP VARCHAR(30),PREFIX VARCHAR(125) UNIQUE NOT NULL,SUFFIX VARCHAR(125) UNIQUE NOT NULL,FORMULA VARCHAR(50) UNIQUE NOT NULL)")

    prec=[("CARBOXYLIC ACIDS","carboxy-","-oic acid / -carboxylic acid","R-COOH"),("ALDEHYDES","formyl","-al / -carbaldehyde","R-CHO"),("KETONES","oxo- / keto-","-one","R-CO"),("ALCOHOLS","hydroxy-","-ol","R-OH"),("AMINES","amino-","-amine","N(R)(R')(R'')"),("ETHERS","alkoxy- / oxa-","-ether / -ane","R-C-O-R'"),("ALKENES","alkenyl-","-ene","R-C=C-R'"),("ALKYNES","alkynyl-","-yne","R-C☰ C-R'")]

    cur.executemany("INSERT IGNORE INTO PREC(GRP,PREFIX,SUFFIX,FORMULA) VALUES(%s,%s,%s,%s)",prec)



    l=[]
    cur.execute("SELECT * FROM PREC")
    f=cur.fetchall()

    for i in f:
        a,b,c,d,e=i
        l.append([a,b,c,d,e])

    print(tabulate(l,headers=["ORDER","FUNCTIONAL GROUP","PREFIX","SUFFIX","FORMULA"],tablefmt="fancy_grid"))

    if report(user)==False:
        return False

    mycon.commit()
def O_examples(user):

    while True:

        choice=input("\251"+"{:>122}".format("⬅️⬅️ Enter b/B to go BACK ⬅️⬅️")+"\n"+"\n\t\t\t\t\t\t\t\t\t\t\t  📕📃 ORGANIC NOMENCLATURE EXAMPLES\n\nEnter the respective Sr No. to study the following group's EXAMPLES 📃:\n\t\t1. ALKANES\n\t\t2. ALKENES\n\t\t3. ALKYNES\n\t\t4. ALCOHOLS\n\t\t5. ALDEHYDES\n\t\t6. KETONES\n\t\t7. CARBOXYLIC ACIDS\n\t\t8. ETHERS\n\t\t9. AMINES"+"{:>102}".format("➤➤")+"\n"+"\t\t10. ALKYL HALIDES"+"{:>100}".format("Enter e/E to")+"\n"+"\t\t11. POLYFUNCTIONAL"+"{:>95}".format("EXIT")+"\n"+"{:>119}".format("➤➤")+"\n"+" ☛ ")
        print('='*125)

        if choice=='1':
            if O_display("ALKANES",user)==False:
                return False

        elif choice=='2':
            if O_display("ALKENES",user)==False:
                return False

        elif choice=='3':
            if O_display("ALKYNES",user)==False:
                return False

        elif choice=='4':
            if O_display("ALCOHOLS",user)==False:
                return False

        elif choice=='5':
            if O_display("ALDEHYDES",user)==False:
                return False

        elif choice=='6':
            if O_display("KETONES",user)==False:
                return False

        elif choice=='7':
            if O_display("CARBOXYLIC ACIDS",user)==False:
                return False
        elif choice=='8':
            if O_display("ETHERS",user)==False:
                return False

        elif choice=='9':
            if O_display("AMINES",user)==False:
                return False

        elif choice=='10':
            if O_display("ALKYL HALIDES",user)==False:
                return False

        elif choice=='11':
            if O_display("POLYFUNCTIONAL",user)==False:
                return False

        elif choice=='b' or choice=='B':
            break

        elif choice=='e' or choice=='E':
            return False

        else:
            print("WRONG CHOICE!!")
            print('.'*125)
            continue
def O_dis(grp):

    l=[]
    cur.execute("SELECT FORMULA,NAME FROM STUDY WHERE GRP='{}' AND TYPE='ORGANIC'".format(grp))

    f=cur.fetchall()
    for i in f:
        a,b=i
        l.append([a,b])

    table=tabulate(l,tablefmt="plain")
    console_width=os.get_terminal_size().columns
    padding=(console_width-len(table.splitlines()[0]))//2
    centered_table='\n'.join(' '*padding+line for line in table.splitlines())

    print('\251'+"{:>122}".format("⬅️⬅️ Enter b/B to go BACK ⬅️⬅️")+"\n"+'\n📕📃',grp,'EXAMPLES\n')
    print(centered_table)
def O_display(grp,user):

    O_dis(grp)

    if report(user)==False:
        return False
def OC_test(type,user):

    print("\251\n\t\t\t\t\t\t\t\t\t\t⏳ {} NOMENCLATURE TEST TIME ⌛".format(type))
    print("\nNOTE:  WRITE THE NAMES ACCORDING TO IUPAC POLICY:\n\n\t  ⭕ KEEP THE INITIAL LETTER CAPITAL\t\t\t\t\t\t\t\t\t\t\t\t\t  * can\'t quit the test *'\n\n\t  ⭕ NO SPACE IN THE COMPOUND NAME\t\t\t\t\t\t\t\t\t\t\t\t\t YOU CAN DO IT C'MON <ALL THE BEST>\n")

    cur.execute("CREATE TABLE IF NOT EXISTS SCORE(SRNO INT PRIMARY KEY AUTO_INCREMENT,USERNAME VARCHAR(20),SCORE INT,TEST VARCHAR(50),FOREIGN KEY(USERNAME) REFERENCES LOGINPAGE(USERNAME))")

    cur.execute("SELECT FORMULA,NAME FROM STUDY WHERE TYPE='{}' ORDER BY RAND() LIMIT 5".format(type))

    type=type+'NOMENCLATURE'
    test(type,user)
    
    if report(user)==False:
        return False

    mycon.commit()
def C_rules(user):

    print('\251'+"{:>122}".format("⬅️⬅️ Enter b/B to go BACK ⬅️⬅️")+"\n"+'\n\t\t\t\t\t\t\t\t\t\t  📘📜 COORDINATION NOMENCLATURE IUPAC RULES\n\n❶ The ligands are always written before the central metal ion in the name of complex coordination complexes.\n\n❷ When the coordination centre is bound to more than one ligand, the names of the ligands are written in an alphabetical order which is not affected by the numerical prefixes that must be applied to the ligands.\n\n❸ When there are many monodentate ligands present in the coordination compound, the prefixes that give insight into the number of ligands are of the type: di-, tri-, tetra-, and so on.\n\n❹ When there are many polydentate ligands attached to the central metal ion, the prefixes are of the form bis-, tris-, and so on.\n\n❺ The names of the anions present in a coordination compound must end with the letter ‘o’, which choice1nerally replaces the letter ‘e’. Therefore, the sulfate anion must be written as ‘sulfato’, and the chloride anion must be written as ‘chlorido’.\n\n❻ The following neutral ligands are assigned specific names in coordination compounds: NH3 (ammine), H2O (aqua or aquo), CO (carbonyl), and NO (nitrosyl).\n\n❼ After the ligands are named, the name of the central metal atom is written. If the complex has an anionic charchoice1 associated with it, the suffix ‘-ate’ is applied.\n\n❽ When writing the name of the central metallic atom in an anionic complex, priority is given to the Latin name of the metal if it exists (with the exception of mercury).\n\n❾ The oxidation state of the central metal atom/ion must be specified with the help of Roman numerals that are enclosed in a set of parentheses.\n\n❿ If the coordination compound is accompanied by a counter ion, the cationic entity must be written before the anionic entity.')

    if report(user)==False:
        return False
def C_dis():
    
    cur.execute("SELECT FORMULA,NAME FROM STUDY WHERE TYPE='COORDINATION'")

    l=[]
    f=cur.fetchall()
    for i in f:
        a,b=i
        l.append([a,b])

    table=tabulate(l,tablefmt="plain")
    console_width=os.get_terminal_size().columns
    padding=(console_width-len(table.splitlines()[0]))//2
    centered_table='\n'.join(' '*padding+line for line in table.splitlines())

    print('\251'+"{:>122}".format("⬅️⬅️ Enter b/B to go BACK ⬅️⬅️")+"\n"+'\n📘📃 COORDINATION EXAMPLES\n')
    print(centered_table)
def C_display(user):

    C_dis()

    if report(user)==False:
        return False
def full_test(user):

    print("\251\n\t\t\t\t\t\t\t\t\t⏳ ORGANIC AND COORDINATION NOMENCLATURE TEST TIME ⌛")

    print("\nNOTE:  WRITE THE NAMES ACCORDING TO IUPAC POLICY:\n\n\t  ⭕ KEEP THE INITIAL LETTER CAPITAL\t\t\t\t\t\t\t\t\t\t\t\t\t  * can\'t quit the test *'\n\n\t  ⭕ NO SPACE IN THE COMPOUND NAME and COMPLEX\t\t\t\t\t\t\t\t\t\t\t\t\t YOU CAN DO IT C'MON <ALL THE BEST>\n")

    cur.execute("CREATE TABLE IF NOT EXISTS SCORE(SRNO INT PRIMARY KEY AUTO_INCREMENT,USERNAME VARCHAR(20),SCORE INT,TEST VARCHAR(50),FOREIGN KEY(USERNAME) REFERENCES LOGINPAGE(USERNAME))")

    cur.execute("SELECT FORMULA,NAME FROM STUDY ORDER BY RAND() LIMIT 5")

    test('ORGANIC AND COORDINATION NOMENCLATURE',user)

    if report(user)==False:
        return False

    mycon.commit()
def test(test,user):

    f=cur.fetchall()
    s=n=0

    for i in f:
        n+=1
        a,b=i
        print('-'*125,"\nQ ~",n,"of 5","\n\n\t\t\t",a)
        ans=input("\n\tWRITE THE NAME: ")

        if ans==b:
            print("\n\t\t\tCORRECT ANSWER👏👏")
            s+=1
        else:
            print("\n\t\t\tuh oh! WRONG ANSWER ❌\n\t\t\t\t\t\t\t\t\t\t\t\t\tCORRECT ANSWER IS-",b)

    cur.execute("INSERT IGNORE INTO SCORE(SCORE,USERNAME,TEST) VALUES({},'{}','{}')".format(s,user,test))

    print('-'*125+"\n"+"{:>122}".format("⬅️⬅️ Enter b/B to go BACK ⬅️⬅️")+"\n"+"\n\t\t\t\t\t\t\t\t\t\t\t\t\t YAY 👍        \n\t\t\t\t\t\t\t\t\t\t\t\t\t",user,"SCORED -",s,"/5")

    mycon.commit()
def reviews(user):

    cur.execute("CREATE TABLE IF NOT EXISTS REVIEWS(SRNO INT PRIMARY KEY AUTO_INCREMENT,FEEDBACK VARCHAR(250),RATING FLOAT,REPORTS VARCHAR(250),USERNAME VARCHAR(17),FOREIGN KEY(USERNAME) REFERENCES LOGINPAGE(USERNAME))")

    while True:

        choice=input("\251"+"{:>122}".format("⬅️⬅️ Enter b/B to go BACK ⬅️⬅️")+"\n"+"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  📩 REVIEWS\n\n\t\t\t\t\t\t\t\t\t\t\t💌 Enter s/S to SEE REVIEWS OF OUR USERS 💌\n\n\tEnter 1 to give FEEDBACK 💬"+"{:>88}".format("➤➤")+"\n"+"\tEnter 2 to give RATINGS ✰"+"{:>96}".format("Enter e/E to")+"\n"+"{:>122}".format("EXIT")+"\n"+"📢📢 ENTER r/R to REPORT a problem 📢📢"+"{:>79}".format("➤➤")+"\n\n"+" ☛ ")
        print('-'*125)

        if choice=='s' or choice=='S':
            print("💌 FEEDBACK 💌")
            cur.execute("SELECT USERNAME,FEEDBACK FROM REVIEWS WHERE FEEDBACK IS NOT NULL")
            feed=cur.fetchall()
            for i in feed:
                a,b=i
                print("\n",a,":",b)

            print("\n\n✰ RATINGS ✰")
            cur.execute("SELECT USERNAME,RATING FROM REVIEWS WHERE RATING IS NOT NULL")
            feed=cur.fetchall()
            for i in feed:
                a,b=i
                print("\n",a,":",b,"stars out of 10")
        elif choice=='1':
            fb=input('💬 Please share FEEDBACK freely: ')
            cur.execute("INSERT INTO REVIEWS(FEEDBACK,USERNAME)VALUES('{}','{}')".format(fb,user))
            print('.'*125)
            print("THANKYOU FOR YOUR FEEDBACK!\n")


        elif choice=='2':
            rt=input('✰ ✰ ✰ ✰ ✰ ✰ ✰ ✰ ✰ ✰\nRATE numerically(out of 10) : ')
            cur.execute("INSERT INTO REVIEWS(RATING,USERNAME)VALUES({},'{}')".format(rt,user))
            print('.'*125)
            print("THANKYOU FOR YOUR RATINGS!\n")

        elif choice=='r' or choice=='R':
            er=input('📢 Please REPORT the problem: ')
            cur.execute("INSERT INTO REVIEWS(REPORTS,USERNAME)VALUES('{}','{}')".format(er,user))
            print('.'*125)
            print('Thankyou for reporting!\n\n\t\t\t\t\t\t\t\t\t\t\t\t\tTaken into consideration.')

        elif choice=='e' or choice=='E':
            print("Thankyou so much for investing your time for REVIEWS^^\n")
            print('='*125)
            return False

        elif choice=='b' or choice=='B':
            print("Thankyou so much for investing your time for REVIEWS^^\n")
            print('='*125)
            break

        else:
            print("WRONG CHOICE!!")
            print('.'*125)
            continue
        print('='*125)

    mycon.commit()
def report(user):

    print('.'*125)
    while True:

        choice=input("{:>119}".format("➤➤")+"\n"+"{:>125}".format("Enter e/E to")+"\n"+"📢📢 ENTER r/R to REPORT a problem 📢📢"+"{:>81}".format("EXIT")+"\n"+"{:>119}".format("➤➤")+"\n\n"+" ☛ ")
        print('='*125)

        if choice=="b" or choice=='B':
            break

        elif choice=='R' or choice=='r':
            report=input('📢 Please report the problem: ')
            print('.'*125)
            print('Thankyou for reporting\n\n\t\t\t\t\t\t\t\t\t\t\t\t\tTaken into consideration.')
            print('='*125)
            cur.execute("CREATE TABLE IF NOT EXISTS REVIEWS(SRNO INT PRIMARY KEY AUTO_INCREMENT,FEEDBACK VARCHAR(250),RATING FLOAT,REPORTS VARCHAR(250),OTHERS VARCHAR(250),USERNAME VARCHAR(17),FOREIGN KEY(USERNAME) REFERENCES LOGINPAGE(USERNAME))")
            cur.execute('INSERT INTO REVIEWS(REPORTS,USERNAME)VALUES("{}","{}")'.format(report,user))
            break

        elif choice=='e' or choice=='E':
            return False

        else:
            print("WRONG CHOICE!!")
            print('.'*125)
            continue

        mycon.commit()
def landing_page():

    print("\251\n\n\t\t\t\t\t\t\t\t\t\t\t\tWe hope you had a great time !\t\t\t\t\t\t\t\t\t\t\t™\n\t\t\t\t\t\t\t\t\t\t\t\t\t ~ DO VISIT AGAIN ~\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t🧪\t  \251 \251    🧪\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\251     \251\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\251\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\251     A R B O N o m i c s\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\251       ^ A COMIC OF IUPAC ^\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\251     \251\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  \251 \251\n\n\n\t\t\t\t\t\t Connect with us on our social media handles for more new stuff like these:)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t@smrit_kinra\n\n──────────── ⋆⋅☆⋅⋆ ─────────────💎💎💎✨THANKYOU SO MUCH for your precious time<3✨💎💎💎───────────── ⋆⋅☆⋅⋆ ────────────\n")
    print('='*125)
#MAIN PROGRAM
from tabulate import tabulate
import os
import mysql.connector
mycon=mysql.connector.connect(user='root',password='Smriti14kinra',host='localhost')
cur=mycon.cursor()
data()
cur.close()
mycon.close()
